@startuml

package vue{

class VueAbstraite{
+ message : str
+ questions : json
+ __init__()
+ afficher() : None
+ choisir_menu() : Vue
}

class AccueilVue{
} 

class AdministrateurMenuVue{
} 

class JoueurMenuVue{
}

class MaîtreJeuMenuVue{
}

class InscriptionVue{
}

class ConnexionVue{
}

class Creer_personnage_vue{
}

class Creer_table_vue{
}

class Gerer_table_vue{
}

class Supprimer_joueur_vue{
}

class Rejoindre_table_vue{
}


class Session{
+ pseudo : str
+ __init__()
}

VueAbstraite <|-- AccueilVue
VueAbstraite <|-- JoueurMenuVue
VueAbstraite <|-- AdministrateurMenuVue
VueAbstraite <|-- MaîtreJeuMenuVue
VueAbstraite <|-- InscriptionVue
VueAbstraite <|-- ConnexionVue
VueAbstraite <|-- Creer_personnage_vue
VueAbstraite <|-- Creer_table_vue
VueAbstraite <|-- Gerer_table_vue
VueAbstraite <|-- Supprimer_joueur_vue
VueAbstraite <|-- Rejoindre_table_vue

Session -- JoueurMenuVue
Session -- ConnexionVue
Session -- AdministrateurMenuVue

}


package business_objets {

class Administrateur{
+ id_admin : int
+ pseudo : str

+__init__()
}

class Joueur{
+ id_joueur : int
+ pseudo : str
+ nom : str
+ prenom : str
+ mail : str
+ personnages : list[Personnage]

+__init__()
}

class MaitreJeu{
+__init__()
}



class TableJeu{
+ id_table : int
+ id_seance : int
+ scenario : str
+ maitre_jeu : MaitreJeu
+ personnages : list[Personnage]

+__init__()
}

class Personnage{
+ id_personnage : int
+ nom : str
+ classe : str
+ race : str
+ niveau : int
+ competences : list[str]
+ langues_parlees : list[str]

+__init__()
}


TableJeu o-- Personnage : aggrège une liste >
TableJeu -- MaitreJeu : contient >
Personnage --o Joueur : aggrège une liste <

Joueur <|-- MaitreJeu
}


package service {
class AdministrateurService{
+ __init__()
+ creer_table_autorisee(seance : str) : bool
+ voir_programme_complet() : str
+ lister_tables_actives() : list([Tablejeu])
+ lister_joueur() : str
+ voir_messages() : str
}
 

class JoueurService{
+ __init__()
+ creer(pseudo : str, nom : str, prenom : str, mail : str) : Joueur
+ supprimer(compte : Joueur) : None
+ lister_tous() : list[Joueur]
+ trouver_par_pseudo(pseudo : str) : Joueur
+ creation_personnage_autorisee() : bool
+ lister_personnages() : str
+ voir_son_programme() : str
+ voir_messages() : str
+ trouver_personnage_a_la_table(id_table : str) : Personnage
}


class MaîtreJeuService{
+ __init__()
+ gerer_table(TableJeu, scenario) : bool
+ resilier_table(TableJeu) : bool
+ voir_table_geree(TableJeu) : None
}

}


package dao{

class DBconnection{
- __connection: psycopg2.connect

+ connection() : psycopg2.connect
}

class MessageDao{
+ __init__()
+ creer(texte : str, Joueur) : bool
+ lister_par_joueur(Joueur) : list[str]

}

class JoueurDao{
+ __init__()
+ creer(Joueur) : Joueur
+ supprimer(Joueur) : bool
+ trouver_par_pseudo(pseudo : str) : Joueur
}


class PersonnageDao{
+ __init__()
+ creer(Personnage) : Personnage
+ supprimer(Personnage) : bool
+ lister_par_joueur(Joueur) : list[Personnage]
}

class TableJeuDao{
+ __init__()
+ creer(TableJeu) : TableJeu
+ supprimer(TableJeu) : bool
+ trouver_par_numero(id_table : int) : TableJeu
+ modifier_mj(MaitreJeu) : bool
+ ajouter_joueur_table(Joueur, TableJeu) : bool
+ supprimer_joueur_table(Joueur, TableJeu) : bool
}

}


class Singleton{
"" méta class ""
- __instances : Singleton
+ __call__()
}


InscriptionVue -- JoueurService
JoueurMenuVue -- JoueurService
AdministrateurMenuVue -- AdministrateurService
MaîtreJeuMenuVue -- MaîtreJeuService

JoueurService --> JoueurDao : gestion joueur >
JoueurService --> PersonnageDao : gestion/affichage personnage >
JoueurService --> TableJeuDao : intéraction joueur/table >
MaîtreJeuService --> TableJeuDao : gestion/affichage >
AdministrateurService --> TableJeuDao : gestion des personnages/joueurs >
MaîtreJeuService --> MessageDao : processus de notification >
AdministrateurService --> MessageDao : processus de notification >
JoueurService .. MessageDao : affichage message >



JoueurDao ..> DBconnection : utilise >
PersonnageDao ..> DBconnection : utilise >
TableJeuDao ..> DBconnection : utilise >
MessageDao ..> DBconnection : utilise >

DBconnection ..|> Singleton : hérite d'une méta classe

@enduml
